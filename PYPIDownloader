#!/usr/bin/python3
import os
import base64
import sqlite3
import os
import sys
import shutil
import importlib
import zlib
# The default app folder, MUST have a file named app.py with a function called: def start(argv):
DEFAULT_APP_FOLDER = "PYPIDownloaderApp"


def start():
    module = importlib.import_module(DEFAULT_APP_FOLDER + ".app")
    module.start(sys.argv)


def update():
    if not os.path.exists(DEFAULT_APP_FOLDER):
        exit("Cannot update, app folder \"%s\" missing" %
             (DEFAULT_APP_FOLDER))
    # init new db file, delete if it exists before
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    conn = sqlite3.connect(temp_dbfile)
    conn.execute(
        "CREATE TABLE \"appfiles\" ( `id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, `filename` TEXT NOT NULL, `data` BLOB )")

    # Get All files with app folder
    for dirpath, _, filenames in os.walk(DEFAULT_APP_FOLDER):
        for name in filenames:
            if dirpath.endswith("__pycache__"):
                continue
            # Read the file content
            with open(os.path.join(dirpath, name), 'rb') as content:
                conn.execute(
                    "INSERT INTO appfiles(filename,data) VALUES (?,?)", [os.path.join(dirpath, name), content.read()])
    conn.commit()
    conn.close()
    with open(temp_dbfile, 'rb') as d:
        compressedData = zlib.compress(d.read(), 9)
        dbbytes_base64 = base64.b64encode(compressedData).decode('utf-8')
        d.close()
        with open(sys.argv[0], 'r') as w:
            lines = w.readlines()
            w.close()
            for i in range(0, len(lines)):
                if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                    lines[i+1] = dbbytes_base64 + "\n"
                    break
            with open(sys.argv[0], 'w') as wr:
                wr.writelines(lines)
            print("I've updated myself :)")
            os.remove(temp_dbfile)


def install():
    # we will read outself, data should be place at the end of this file
    myselffile = sys.argv[0]
    dataBase64 = ""
    with open(myselffile, 'r') as w:
        lines = w.readlines()
        w.close()
        for i in range(0, len(lines)):
            if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                # -1 for line break at the end of the file
                dataBase64 = lines[i+1][:-1]
                break

    db_bytes_compressed = base64.b64decode(dataBase64)
    db_bytes_extracted = zlib.decompress(db_bytes_compressed)
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    with open(temp_dbfile, 'wb') as w:
        w.write(db_bytes_extracted)
        conn = sqlite3.connect(temp_dbfile)
        try:
            cursor = conn.cursor()
            cursor.execute("select * from appfiles")
            results = cursor.fetchall()
            if not os.path.exists(DEFAULT_APP_FOLDER):
                os.makedirs(DEFAULT_APP_FOLDER)
            for _, r_filename, r_data in results:
                os.makedirs(os.path.dirname(r_filename), exist_ok=True)
                with open(r_filename, 'wb') as w:
                    w.write(r_data)
        except Exception as ex:
            exit(ex)
        os.remove(temp_dbfile)


def main():
    RunMode = "start"
    if len(sys.argv) > 1:
        RunMode = sys.argv[1].lower()
    if RunMode == "start":
        if not os.path.exists(DEFAULT_APP_FOLDER):
            install()
        start()
    elif RunMode == "install":
        if os.path.exists(DEFAULT_APP_FOLDER):
            shutil.rmtree(DEFAULT_APP_FOLDER, ignore_errors=True)
        install()
        start()
    elif RunMode == "update":
        update()


if __name__ == "__main__":
    main()


"""
--DATA-BEGIN-ZLIB-COMPRESSED

--DATA-END-ZLIB-COMPRESSED
"""
