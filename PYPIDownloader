#!/usr/bin/python3
import os
import base64
import sqlite3
import os
import sys
import shutil
import importlib
import zlib
# The default app folder, MUST have a file named app.py with a function called: def start(argv):
DEFAULT_APP_FOLDER = "PYPIDownloaderApp"


def start():
    module = importlib.import_module(DEFAULT_APP_FOLDER + ".app")
    module.start(sys.argv)


def update():
    if not os.path.exists(DEFAULT_APP_FOLDER):
        exit("Cannot update, app folder \"%s\" missing" %
             (DEFAULT_APP_FOLDER))
    # init new db file, delete if it exists before
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    conn = sqlite3.connect(temp_dbfile)
    conn.execute(
        "CREATE TABLE \"appfiles\" ( `id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, `filename` TEXT NOT NULL, `data` BLOB )")

    # Get All files with app folder
    for dirpath, _, filenames in os.walk(DEFAULT_APP_FOLDER):
        for name in filenames:
            if dirpath.endswith("__pycache__"):
                continue
            # Read the file content
            with open(os.path.join(dirpath, name), 'rb') as content:
                conn.execute(
                    "INSERT INTO appfiles(filename,data) VALUES (?,?)", [os.path.join(dirpath, name), content.read()])
    conn.commit()
    conn.close()
    with open(temp_dbfile, 'rb') as d:
        compressedData = zlib.compress(d.read(), 9)
        dbbytes_base64 = base64.b64encode(compressedData).decode('utf-8')
        d.close()
        with open(sys.argv[0], 'r') as w:
            lines = w.readlines()
            w.close()
            for i in range(0, len(lines)):
                if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                    lines[i+1] = dbbytes_base64 + "\n"
                    break
            with open(sys.argv[0], 'w') as wr:
                wr.writelines(lines)
            print("I've updated myself :)")
            os.remove(temp_dbfile)


def install():
    # we will read outself, data should be place at the end of this file
    myselffile = sys.argv[0]
    dataBase64 = ""
    with open(myselffile, 'r') as w:
        lines = w.readlines()
        w.close()
        for i in range(0, len(lines)):
            if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                # -1 for line break at the end of the file
                dataBase64 = lines[i+1][:-1]
                break

    db_bytes_compressed = base64.b64decode(dataBase64)
    db_bytes_extracted = zlib.decompress(db_bytes_compressed)
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    with open(temp_dbfile, 'wb') as w:
        w.write(db_bytes_extracted)
        conn = sqlite3.connect(temp_dbfile)
        try:
            cursor = conn.cursor()
            cursor.execute("select * from appfiles")
            results = cursor.fetchall()
            if not os.path.exists(DEFAULT_APP_FOLDER):
                os.makedirs(DEFAULT_APP_FOLDER)
            for _, r_filename, r_data in results:
                os.makedirs(os.path.dirname(r_filename), exist_ok=True)
                with open(r_filename, 'wb') as w:
                    w.write(r_data)
        except Exception as ex:
            exit(ex)
        os.remove(temp_dbfile)


def main():
    RunMode = "start"
    if len(sys.argv) > 1:
        RunMode = sys.argv[1].lower()
    if RunMode == "start":
        if not os.path.exists(DEFAULT_APP_FOLDER):
            install()
        start()
    elif RunMode == "install":
        if os.path.exists(DEFAULT_APP_FOLDER):
            shutil.rmtree(DEFAULT_APP_FOLDER, ignore_errors=True)
        install()
        start()
    elif RunMode == "update":
        update()


if __name__ == "__main__":
    main()


"""
--DATA-BEGIN-ZLIB-COMPRESSED
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
--DATA-END-ZLIB-COMPRESSED
"""
