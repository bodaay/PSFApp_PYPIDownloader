#!/usr/bin/python3
import os
import base64
import sqlite3
import os
import sys
import shutil
import importlib
import zlib
# The default app folder, MUST have a file named app.py with a function called: def start(argv):
DEFAULT_APP_FOLDER = "PYPIDownloaderApp"


def start():
    module = importlib.import_module(DEFAULT_APP_FOLDER + ".app")
    module.start(sys.argv)


def update():
    if not os.path.exists(DEFAULT_APP_FOLDER):
        exit("Cannot update, app folder \"%s\" missing" %
             (DEFAULT_APP_FOLDER))
    # init new db file, delete if it exists before
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    conn = sqlite3.connect(temp_dbfile)
    conn.execute(
        "CREATE TABLE \"appfiles\" ( `id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, `filename` TEXT NOT NULL, `data` BLOB )")

    # Get All files with app folder
    for dirpath, _, filenames in os.walk(DEFAULT_APP_FOLDER):
        for name in filenames:
            if dirpath.endswith("__pycache__"):
                continue
            # Read the file content
            with open(os.path.join(dirpath, name), 'rb') as content:
                conn.execute(
                    "INSERT INTO appfiles(filename,data) VALUES (?,?)", [os.path.join(dirpath, name), content.read()])
    conn.commit()
    conn.close()
    with open(temp_dbfile, 'rb') as d:
        compressedData = zlib.compress(d.read(), 9)
        dbbytes_base64 = base64.b64encode(compressedData).decode('utf-8')
        d.close()
        with open(sys.argv[0], 'r') as w:
            lines = w.readlines()
            w.close()
            for i in range(0, len(lines)):
                if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                    lines[i+1] = dbbytes_base64 + "\n"
                    break
            with open(sys.argv[0], 'w') as wr:
                wr.writelines(lines)
            print("I've updated myself :)")
            os.remove(temp_dbfile)


def install():
    # we will read outself, data should be place at the end of this file
    myselffile = sys.argv[0]
    dataBase64 = ""
    with open(myselffile, 'r') as w:
        lines = w.readlines()
        w.close()
        for i in range(0, len(lines)):
            if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                # -1 for line break at the end of the file
                dataBase64 = lines[i+1][:-1]
                break

    db_bytes_compressed = base64.b64decode(dataBase64)
    db_bytes_extracted = zlib.decompress(db_bytes_compressed)
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    with open(temp_dbfile, 'wb') as w:
        w.write(db_bytes_extracted)
        conn = sqlite3.connect(temp_dbfile)
        try:
            cursor = conn.cursor()
            cursor.execute("select * from appfiles")
            results = cursor.fetchall()
            if not os.path.exists(DEFAULT_APP_FOLDER):
                os.makedirs(DEFAULT_APP_FOLDER)
            for _, r_filename, r_data in results:
                os.makedirs(os.path.dirname(r_filename), exist_ok=True)
                with open(r_filename, 'wb') as w:
                    w.write(r_data)
        except Exception as ex:
            exit(ex)
        os.remove(temp_dbfile)


def main():
    RunMode = "start"
    if len(sys.argv) > 1:
        RunMode = sys.argv[1].lower()
    if RunMode == "start":
        if not os.path.exists(DEFAULT_APP_FOLDER):
            install()
        start()
    elif RunMode == "install":
        if os.path.exists(DEFAULT_APP_FOLDER):
            shutil.rmtree(DEFAULT_APP_FOLDER, ignore_errors=True)
        install()
        start()
    elif RunMode == "update":
        update()


if __name__ == "__main__":
    main()


"""
--DATA-BEGIN-ZLIB-COMPRESSED
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
--DATA-END-ZLIB-COMPRESSED
"""
